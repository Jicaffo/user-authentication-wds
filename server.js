import express from 'express';
import bcrypt from 'bcrypt';

const app = express();
const PORT = 3002;

// Dummy DB
const users = [
    {
        name: "Juan",
        password: "4321" // Dummy not hashed passwords only for tutorial purposes, WORST idea
    },
    {
        name: "User 2",
        password: "1234"
    },
]
const encrypt = async (plainTextPassword) => {
    // We generate a "salt", a character sequence that changes for each encryption and will be added to the password, so even equal passwords once hashed will be diferent.
    // The higher the saltRounds number we pass as argument, the more variability and thus, security (default = 10).
    const salt = await bcrypt.genSalt()
     // We can also pass the saltRounds value directly instead of the salt argument if we want.
    const hashedPasword = await bcrypt.hash(plainTextPassword, salt) // or "hash(plainTextPassword, 10)"

    console.log(`${plainTextPassword} (plainTextPassword) + ${salt} (autogenerated salt) = ${hashedPasword} (hashedPasword)`) // This shouldn't be present in a real app, even as a console log?

    return hashedPasword;
} 

app.use(express.json());

app.get("/users", (req, res)=>{
    res.json(users)
})

app.post("/users", async (req, res)=>{
    // If we dont recieve data through req.body, err.
    if (!req.body?.name || !req.body?.password) return res.status(400).json(`Missing info.`)

    const hashedPassword = await encrypt(req.body.password)
        .catch( (err) => {
            console.log(err)
            return res.sendStatus(500) // In case encryption fails
        })

    const newUser = {
        name: req.body.name,
        password: hashedPassword
    }
    users.push(newUser) // Add user to the "DB"

    const userNames = users//.map(user => user.name)
    res.status(201).json({ // 201 = Created
        status: "success",
        message: `New user '${newUser.name}' added to DB correctly.`,
        data:{
            allUsers: userNames
        }
    })
})

app.post("/users/login", async (req, res)=>{
    // If we dont recieve data through req.body, err.
    if (!req.body?.name || !req.body?.password) return res.status(400).json(`Missing info.`)

    const loginUser = {
        name: req.body.name,
        password: req.body.password
    }

    const foundUser = users.find( dbUser => dbUser.name === loginUser.name)
    console.log("User found: ", foundUser)

    if (!foundUser) return res.status(404).json(`User not found.`)
    else {
        // bcrypt.compare() makes comparision secure (preventing timming attack through "constant timing algorithms") and returns a boolean
        const passwordMatches = await bcrypt.compare(loginUser.password, foundUser.password)
        .catch( (err) => {
            console.log(err)
            return res.status(403).json(`Password doesn't match`)
        })
        
        if (!passwordMatches) return res.status(403).json(`Password doesn't match`)
    }
    
    res.status(200).json({
        status: "success",
        message: `Authenticated correctly!.`,
        data: {
            loggedInAs: foundUser.name
        }
    })
})

app.listen(PORT, ()=>{
    console.log(`*** Server running on port ${PORT} ***`)
})